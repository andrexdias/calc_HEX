{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"P\u00e1gina Principal.","text":""},{"location":"#trabalho-elaborado-por","title":"Trabalho elaborado por:","text":"<ul> <li>Andr\u00e9 Dias</li> <li>Rodrigo Soares</li> <li>Guilherme Nunes</li> <li>Tomas Silva</li> </ul>"},{"location":"#funcionalidades-do-codigo","title":"Funcionalidades do c\u00f3digo:","text":"<ul> <li> <p>(FM01) Cria\u00e7\u00e3o das Tabelas de Gray de \ud835\udc5b Bits: O programa deve permitir a cria\u00e7\u00e3o de tabelas de Gray com um n\u00famero especificado de bits. As tabelas devem seguir a sequ\u00eancia de Gray, onde cada n\u00famero subsequente difere apenas num \u00fanico bit.</p> </li> <li> <p>(FM02) Convers\u00e3o entre Sistemas Num\u00e9ricos: O programa deve ser capaz de converter n\u00fameros entre diferentes bases num\u00e9ricas, como bin\u00e1rio, decimal e hexadecimal.</p> </li> <li> <p>(FA01) Opera\u00e7\u00f5es aritm\u00e9ticas em diferentes bases: Implementa\u00e7\u00e3o de opera\u00e7\u00f5es aritm\u00e9ticas b\u00e1sicas, como a soma e a subtra\u00e7\u00e3o, em n\u00fameros representados em diferentes bases.\u00b4</p> </li> </ul>"},{"location":"#requesitos-tecnicos","title":"Requesitos t\u00e9cnicos:","text":"<ul> <li>O programa deve ser implementado em Python.</li> <li>\u00c9 desej\u00e1vel a utiliza\u00e7\u00e3o de fun\u00e7\u00f5es modulares para facilitar a manuten\u00e7\u00e3o e reutiliza\u00e7\u00e3o do c\u00f3digo.</li> <li>O c\u00f3digo deve ser bem documentado e conter coment\u00e1rios explicativos para facilitar a compreens\u00e3o.</li> <li>Recomenda-se o uso de estruturas de controlo adequadas para garantir a efici\u00eancia e a precis\u00e3o das opera\u00e7\u00f5es.</li> <li>Recomenda-se o uso de estruturas de dados (e.g., listas) para armazenar e manipular os dados.</li> </ul>"},{"location":"conversor/","title":"Docs: conversor.py;","text":"<p>Permite converter em diferentes bases</p>"},{"location":"conversor/#conversor.converter_base","title":"<code>converter_base(numero_e, base_origem, base_destino)</code>","text":"<p>Conversor</p> <p>Parameters:</p> Name Type Description Default <code>numero_e</code> <code>_n\u00famero_</code> <p>\u00e9 o n\u00famero que ser\u00e1 convertido pela base escolhida</p> required <code>base_origem</code> <code>base de origem</code> <p>\u00c9  base do numero que ira ser convertido, base hexadecimal, decimal ou binario</p> required <code>base_destino</code> <code>base de destino</code> <p>\u00c9 a base que deseja ser convertida, base hexadecimal ou decimal ou binaria</p> required <p>Returns:</p> Name Type Description <code>num_base_destino</code> <p>\u00e9 j\u00e1 o n\u00famero convertido pela base desejada</p> Source code in <code>conversor.py</code> <pre><code>def converter_base(numero_e, base_origem, base_destino):\n    \"\"\"Conversor\n\n    Args:\n        numero_e (_n\u00famero_): \u00e9 o n\u00famero que ser\u00e1 convertido pela base escolhida\n        base_origem (base de origem): \u00c9  base do numero que ira ser convertido, base hexadecimal, decimal ou binario\n        base_destino (base de destino): \u00c9 a base que deseja ser convertida, base hexadecimal ou decimal ou binaria\n\n    Returns:\n        num_base_destino: \u00e9 j\u00e1 o n\u00famero convertido pela base desejada\n    \"\"\"\n    hex_map = {10: 'A', 11: 'B', 12: 'C', 13: 'D', 14: 'E', 15: 'F'}\n    num_dec = 0\n    for i, digito in enumerate(reversed(str(numero_e))):\n        num_dec += int(digito) * (base_origem ** i)\n\n    num_base_destino = ''\n    while num_dec &gt; 0:\n        digito = num_dec % base_destino\n        if 10 &lt;= digito &lt;= 15:\n            digito = hex_map[digito]\n        num_base_destino = str(digito) + num_base_destino\n        num_dec //= base_destino\n\n    return num_base_destino\n</code></pre>"},{"location":"op_ar.py/","title":"Docs: op_ar.py;","text":"<p>Permite o calculo de contas de substra\u00e7\u00e3o e soma com diferentes bases!</p>"},{"location":"op_ar.py/#op_ar.converter_base1","title":"<code>converter_base1(num1, base1)</code>","text":"<p>Conversor do Numero 1</p> <p>Parameters:</p> Name Type Description Default <code>num1</code> <code>N\u00famero 1</code> <p>\u00c9 o primeiro n\u00famero que ira ser consertido para decimal</p> required <code>base1</code> <code>Base 01</code> <p>\u00c9 a base 01 do primeiro numero que ira ser convertido para decimal</p> required <p>Returns:</p> Name Type Description <code>resultado1</code> <p>\u00c9 o primeiro n\u00famero j\u00e1 em decimal</p> Source code in <code>op_ar.py</code> <pre><code>def converter_base1(num1, base1):\n    \"\"\"Conversor do Numero 1\n\n    Args:\n        num1 (N\u00famero 1): \u00c9 o primeiro n\u00famero que ira ser consertido para decimal\n        base1 (Base 01): \u00c9 a base 01 do primeiro numero que ira ser convertido para decimal\n\n    Returns:\n        resultado1: \u00c9 o primeiro n\u00famero j\u00e1 em decimal\n    \"\"\"\n    resultado1 = 0\n    num1 = str(num1)\n    for digito in num1:\n        resultado1 = resultado1 * base1\n        if '0' &lt;= digito &lt;= '9':\n            resultado1 += ord(digito) - ord('0')\n        elif 'A' &lt;= digito &lt;= 'F':\n            resultado1 += ord(digito) - ord('A') + 10\n        elif 'a' &lt;= digito &lt;= 'f':\n            resultado1 += ord(digito) - ord('a') + 10\n    return resultado1\n</code></pre>"},{"location":"op_ar.py/#op_ar.converter_base2","title":"<code>converter_base2(num2, base2)</code>","text":"<p>Conversor do Numero 2</p> <p>Parameters:</p> Name Type Description Default <code>num1</code> <code>N\u00famero 2</code> <p>\u00c9 o segundo n\u00famero que ira ser consertido para decimal</p> required <code>base1</code> <code>Base 2</code> <p>\u00c9 a base do segundo numero que ira ser convertido para decimal</p> required <p>Returns:</p> Name Type Description <code>resultado2</code> <p>\u00c9 o segundo n\u00famero j\u00e1 em decimal</p> Source code in <code>op_ar.py</code> <pre><code>def converter_base2(num2, base2):\n    \"\"\"Conversor do Numero 2\n\n    Args:\n        num1 (N\u00famero 2): \u00c9 o segundo n\u00famero que ira ser consertido para decimal\n        base1 (Base 2): \u00c9 a base do segundo numero que ira ser convertido para decimal\n\n    Returns:\n        resultado2: \u00c9 o segundo n\u00famero j\u00e1 em decimal\n    \"\"\"\n    resultado2 = 0\n    num2 = str(num2)\n    for digito in num2:\n        resultado2 = resultado2 * base2\n        if '0' &lt;= digito &lt;= '9':\n            resultado2 += ord(digito) - ord('0')\n        elif 'A' &lt;= digito &lt;= 'F':\n            resultado2 += ord(digito) - ord('A') + 10\n        elif 'a' &lt;= digito &lt;= 'f':\n            resultado2 += ord(digito) - ord('a') + 10\n    return resultado2\n</code></pre>"},{"location":"op_ar.py/#op_ar.som","title":"<code>som(resultado1, resultado2)</code>","text":"<p>Soma dos n\u00fameros</p> <p>Parameters:</p> Name Type Description Default <code>resultado1</code> <code>numero 1 decimal</code> <p>\u00c9  convers\u00e3o do numero que est\u00e1 como str para int</p> required <code>resultado2</code> <code>numero 2 decimal</code> <p>\u00c9  convers\u00e3o do numero que est\u00e1 como str para int</p> required <p>Returns:</p> Name Type Description <code>soma</code> <p>\u00c9 a soma dos numeros</p> Source code in <code>op_ar.py</code> <pre><code>def som(resultado1, resultado2):\n    \"\"\"Soma dos n\u00fameros\n\n    Args:\n        resultado1 (numero 1 decimal): \u00c9  convers\u00e3o do numero que est\u00e1 como str para int\n        resultado2 (numero 2 decimal): \u00c9  convers\u00e3o do numero que est\u00e1 como str para int\n\n    Returns:\n        soma: \u00c9 a soma dos numeros\n    \"\"\"\n    resultado1 = int(resultado1)\n    resultado2 = int(resultado2)\n    soma = resultado1 + resultado2\n    return soma\n</code></pre>"},{"location":"op_ar.py/#op_ar.soma_operacao_aritmetica","title":"<code>soma_operacao_aritmetica(soma, base_final)</code>","text":"<p>convers\u00e3o para base final da soma</p> <p>Parameters:</p> Name Type Description Default <code>soma</code> <code>Soma</code> <p>\u00c9 o resultado da soma da fun\u00e7\u00e3o anterior</p> required <code>base_final</code> <code>Base Final</code> <p>\u00c9 a base final que ira converter a soma</p> required <p>Returns:</p> Name Type Description <code>print</code> <p>\u00c9 o resultado impresso na consola da soma j\u00e1 convertida na base desejada pelo utilizador</p> Source code in <code>op_ar.py</code> <pre><code>def soma_operacao_aritmetica(soma, base_final):\n    \"\"\"convers\u00e3o para base final da soma\n\n    Args:\n        soma (Soma): \u00c9 o resultado da soma da fun\u00e7\u00e3o anterior\n        base_final (Base Final): \u00c9 a base final que ira converter a soma\n\n    Returns:\n        print: \u00c9 o resultado impresso na consola da soma j\u00e1 convertida na base desejada pelo utilizador\n    \"\"\"\n\n    if base_final == 2:  # Binario\n        resultado_final_s = ''\n        while soma:\n            resultado_final_s = str(soma % 2) + resultado_final_s\n            soma //= 2\n    elif base_final == 10:  # decimal\n        resultado_final_s = soma\n    elif base_final == 16:  # hexadecimal\n        hex_map = {10: 'A', 11: 'B', 12: 'C', 13: 'D', 14: 'E', 15: 'F'}\n        resultado_final = ''\n        while soma:\n            digito = soma % 16\n            if digito in hex_map:\n                resultado_final_s = hex_map[digito] + resultado_final_s\n            else:\n                resultado_final_s = str(digito) + resultado_final_s\n            resultado1 //= 16\n    else:\n        return \"Base final n\u00e3o suportada.\"\n\n    print(f\"O resultado da soma na base {base_final} \u00e9: {resultado_final_s}\")\n</code></pre>"},{"location":"op_ar.py/#op_ar.sub","title":"<code>sub(resultado1, resultado2)</code>","text":"<p>Subtra\u00e7\u00e3o dos n\u00fameros</p> <p>Parameters:</p> Name Type Description Default <code>resultado1</code> <code>numero 1 decimal</code> <p>\u00c9  convers\u00e3o do numero que est\u00e1 como str para int</p> required <code>resultado2</code> <code>numero 2 decimal</code> <p>\u00c9  convers\u00e3o do numero que est\u00e1 como str para int</p> required <p>Returns:</p> Name Type Description <code>subtracao</code> <p>\u00c9 a subtracao dos numeros</p> Source code in <code>op_ar.py</code> <pre><code>def sub(resultado1, resultado2):\n    \"\"\"Subtra\u00e7\u00e3o dos n\u00fameros\n\n    Args:\n        resultado1 (numero 1 decimal): \u00c9  convers\u00e3o do numero que est\u00e1 como str para int\n        resultado2 (numero 2 decimal): \u00c9  convers\u00e3o do numero que est\u00e1 como str para int\n\n    Returns:\n        subtracao: \u00c9 a subtracao dos numeros\n    \"\"\"\n    resultado1 = int(resultado1)\n    resultado2 = int(resultado2)\n    if resultado1 &lt; resultado2:\n        subtracao = resultado2 - resultado1\n    if resultado1 &gt;= resultado2:\n        subtracao = resultado1 - resultado2\n    return subtracao\n</code></pre>"},{"location":"op_ar.py/#op_ar.subn_operacao_aritmetica","title":"<code>subn_operacao_aritmetica(subtracao, base_final)</code>","text":"<p>convers\u00e3o para base final da subtra\u00e7\u00e3o</p> <p>Parameters:</p> Name Type Description Default <code>subtracao</code> <code>Subtra\u00e7\u00e3o</code> <p>\u00c9 o resultado da subtra\u00e7\u00e3o da fun\u00e7\u00e3o anterior</p> required <code>base_final</code> <code>Base Final</code> <p>\u00c9 a base final que ira converter a subtra\u00e7\u00e3o</p> required <p>Returns:</p> Name Type Description <code>print</code> <p>\u00c9 o resultado impresso na consola da soma j\u00e1 convertida na base desejada pelo utilizador</p> Source code in <code>op_ar.py</code> <pre><code>def subn_operacao_aritmetica(subtracao, base_final):\n    \"\"\"convers\u00e3o para base final da subtra\u00e7\u00e3o\n\n    Args:\n        subtracao (Subtra\u00e7\u00e3o): \u00c9 o resultado da subtra\u00e7\u00e3o da fun\u00e7\u00e3o anterior\n        base_final (Base Final): \u00c9 a base final que ira converter a subtra\u00e7\u00e3o\n\n    Returns:\n        print: \u00c9 o resultado impresso na consola da soma j\u00e1 convertida na base desejada pelo utilizador\n    \"\"\"\n    if base_final == 2:  # Binario\n        resultado_final_sub = ''\n        while subtracao:\n            resultado_final_sub = str(subtracao % 2) + resultado_final_sub\n            subtracao //= 2\n    elif base_final == 10:  # decimal\n        resultado_final_sub = subtracao\n    elif base_final == 16:  # hexadecimal\n        hex_map = {10: 'A', 11: 'B', 12: 'C', 13: 'D', 14: 'E', 15: 'F'}\n        resultado_final_sub = ''\n        while subtracao:\n            digito = subtracao % 16\n            if digito in hex_map:\n                resultado_final_sub = hex_map[digito] + resultado_final_sub\n            else:\n                resultado_final_sub = str(digito) + resultado_final_sub\n            resultado_final_sub //= 16\n    else:\n        return \"Base final n\u00e3o suportada.\"\n\n    print(f\"O resultado da subtra\u00e7\u00e3o na base {base_final} \u00e9: {resultado_final_sub}\")\n</code></pre>"},{"location":"tabela_gray/","title":"Docs: tabela_gray.py;","text":"<p>Permite criar tabela de gray com n bits </p>"},{"location":"tabela_gray/#tabela_gray.gray_code","title":"<code>gray_code(n)</code>","text":"<p>Criador da tabela de N Gray</p> <p>Returns:</p> Name Type Description <code>gray</code> <p>Ira mandar print com a tabela</p> Source code in <code>tabela_gray.py</code> <pre><code>def gray_code(n):\n\n    \"\"\"Criador da tabela de N Gray\n\n    Returns:\n        gray: Ira mandar print com a tabela\n    \"\"\"\n\n    gray = ['0', '1']\n\n    for i in range(2, n + 1):\n        gray = gray + gray[::-1]\n\n        for j in range(0, 1 &lt;&lt; (i - 1)):\n            gray[j] = '0' + gray[j]\n\n        for j in range(1 &lt;&lt; (i - 1), 1 &lt;&lt; i):\n            gray[j] = '1' + gray[j]\n\n    return gray\n</code></pre>"}]}